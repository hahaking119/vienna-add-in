<#@ template language="C#v3.5" hostspecific="True" debug="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="Upcc.dll" #>
<#@ assembly name="VIENNAAddInUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Upcc"#>
<#@ import namespace="VIENNAAddInUtils.t4"#>
<#@ import namespace="VIENNAAddInUtils"#>
<# 
	var metaClassifier = MetaModel.Prim;
	var extendManually = false;
#>
<#
	var library = MetaModel.GetPackageRelationsFor(metaClassifier).First().PackageType;
	var umlClassifierType = metaClassifier.GetType().Name.Substring(4);
	var classifier = metaClassifier.Name.FirstCharToLowerCase();
#>
using CctsRepository.<#= library.Name #>;
using NUnit.Framework;
using NUnit.Framework.SyntaxHelpers;
using VIENNAAddIn.upcc3.ccts.util;

namespace VIENNAAddInUnitTests.upcc3.newrepo.upcc
{
    [TestFixture]
    public <#= extendManually ? "partial " : "" #>class Upcc<#= metaClassifier.Name #>Tests
    {
        [Test]
        public void ShouldReturnId()
        {
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .WithId(7)
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
            Assert.That(<#= classifier #>.Id, Is.EqualTo(uml<#= umlClassifierType #>.Id));
        }

        [Test]
        public void ShouldReturnName()
        {
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .WithName("aName")
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
            Assert.That(<#= classifier #>.Name, Is.EqualTo(uml<#= umlClassifierType #>.Name));
        }

	    [Test]
        public void ShouldReturn<#= library.Name #>()
        {
            var umlPackage = new UmlPackageBuilder()
                .WithId(6)
                .Build();
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .WithPackage(umlPackage)
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
            Assert.That(<#= classifier #>.<#= library.Name #>, Is.Not.Null);
            Assert.That(<#= classifier #>.<#= library.Name #>.Id, Is.EqualTo(umlPackage.Id));
        }
<# 
		foreach (var dependency in MetaModel.GetDependenciesFor(metaClassifier))
		{
#>

        [Test]
        public void ShouldResolve<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>Dependency()
        {
            var targetUml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .WithId(5)
                .Build();
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .WithDependencies(Stereotype.<#= dependency.Stereotype #>, targetUml<#= umlClassifierType #>)
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
            Assert.That(<#= classifier #>.<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>.Id, Is.Not.Null);
            Assert.That(<#= classifier #>.<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>.Id, Is.EqualTo(targetUml<#= umlClassifierType #>.Id));
        }

        [Test]
        public void ShouldResolveFirstOfMultiple<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>Dependencies()
        {
            var targetUml<#= umlClassifierType #>1 = new Uml<#= umlClassifierType #>Builder()
                .WithId(5)
                .Build();
            var targetUml<#= umlClassifierType #>2 = new Uml<#= umlClassifierType #>Builder()
                .WithId(6)
                .Build();
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .WithDependencies(Stereotype.<#= dependency.Stereotype #>, targetUml<#= umlClassifierType #>1, targetUml<#= umlClassifierType #>2)
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
            Assert.That(<#= classifier #>.<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>.Id, Is.Not.Null);
            Assert.That(<#= classifier #>.<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>.Id, Is.EqualTo(targetUml<#= umlClassifierType #>1.Id));
        }

        [Test]
        public void ShouldResolveNull<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>DependencyToNull()
        {
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
            Assert.That(<#= classifier #>.<#= dependency.Stereotype.ToString().FirstCharToUpperCase() #>, Is.Null);
        }
<#
		}
		
///==========================================================================================================================
/// Tagged Values
///==========================================================================================================================

#>

		[Test]
        public void ShouldReturnEmptyValuesForNullTaggedValues()
        {
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder().Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
<#
	foreach (var metaTaggedValue in metaClassifier.TaggedValues)
	{
#>
            Assert.That(<#= classifier #>.<#= metaTaggedValue.AsPropertyName() #>, Is.Not.Null);
            Assert.That(<#= classifier #>.<#= metaTaggedValue.AsPropertyName() #>, Is.Empty);
<#
	}
#>
        }

        [Test]
        public void ShouldReturnValueOfTaggedValues()
        {
            var uml<#= umlClassifierType #> = new Uml<#= umlClassifierType #>Builder()
<#
	foreach (var metaTaggedValue in metaClassifier.TaggedValues)
	{
		if (metaTaggedValue.Cardinality == MetaCardinality.Many)
		{
#>
                .WithMultiValuedTaggedValue(TaggedValues.<#= metaTaggedValue.Name #>, "<#= metaTaggedValue.Name #>_Value1", "<#= metaTaggedValue.Name #>_Value2")
<#
		}
		else
		{
#>
                .WithTaggedValue(TaggedValues.<#= metaTaggedValue.Name #>, "<#= metaTaggedValue.Name #>_Value")
<#
		}
	}
#>
                .Build();
            I<#= metaClassifier.Name #> <#= classifier #> = new Upcc<#= metaClassifier.Name #>(uml<#= umlClassifierType #>);
<#
	foreach (var metaTaggedValue in metaClassifier.TaggedValues)
	{
#>
<#
		if (metaTaggedValue.Cardinality == MetaCardinality.Many)
		{
#>
            Assert.That(<#= classifier #>.<#= metaTaggedValue.AsPropertyName() #>, Is.EquivalentTo(new[] {"<#= metaTaggedValue.Name #>_Value1", "<#= metaTaggedValue.Name #>_Value2"}));
<#
		}
		else
		{
#>
            Assert.That(<#= classifier #>.<#= metaTaggedValue.AsPropertyName() #>, Is.EqualTo("<#= metaTaggedValue.Name #>_Value"));
<#
		}
	}
#>
        }
    }
}
