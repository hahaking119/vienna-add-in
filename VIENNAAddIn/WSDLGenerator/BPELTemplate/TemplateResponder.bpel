<?xml version="1.0" encoding="UTF-8"?>
<bpel:process xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:bs="@@Namespace_BusinessSignal" xmlns:bt="@@Namespace_BusinessTransaction" xmlns:ns="urn:xml-gov-au:draft:data:messagingAggregates:1.1" xmlns:sbd="urn:xml-gov-au:draft:data:messagingAggregates:1.1" xmlns:tm="@@Namespace_TransactionModule" xmlns:tns="@@Namespace_Transaction" xmlns:xsd="http://www.w3.org/2001/XMLSchema" expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" name="@@PortType_RespondingBusinessActivity" queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" suppressJoinFailure="yes" targetNamespace="http://@@PortType_RespondingBusinessActivity">
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_TM_FileLocation" namespace="@@Namespace_Transaction"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_BS_FileLocation" namespace="@@Namespace_BusinessSignal"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_TMM_FIleLocation" namespace="@@Namespace_TransactionModule"/>
   <bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_BT_FileLocation" namespace="@@Namespace_BusinessTransaction"/>
   <bpel:partnerLinks>
      <bpel:partnerLink myRole="@@PortType_RespondingBusinessActivity" name="@@PartnerLinkTypeName_PublicIRLink" partnerLinkType="tns:@@PartnerLinkType_Public" partnerRole="@@PortType_RequestingBusinessActivity"/>
      <bpel:partnerLink myRole="@@PortType_RespondingBusinessActivity_PrivateFacing" name="@@PartnerLinkTypeName_RespondingPrivateTMLink" partnerLinkType="tns:@@PartnerLinkType_RespondingPrivate" partnerRole="@@PortType_RespondingBusinessActivity_BA"/>
   </bpel:partnerLinks>
   <bpel:variables>
      <bpel:variable name="TimeToAckReceipt_Responding" type="xsd:duration"/>
      <bpel:variable name="RequestValid" type="xsd:boolean"/>
      <bpel:variable name="TimeToRespond" type="xsd:duration"/>
      <bpel:variable name="ProcessEnded" type="xsd:boolean"/>
      <bpel:variable name="EventLog" type="xsd:string"/>
      <bpel:variable name="TimestampRequestReceived" type="xsd:dateTime"/>
      <bpel:variable name="IsReceiptPositive" type="xsd:boolean"/>
      <bpel:variable messageType="bt:RequestMsg" name="RequestingMsg"/>
      <bpel:variable messageType="bt:NegativeResponseMsg" name="NegativeResponseMsg"/>
      <bpel:variable messageType="bt:PositiveResponseMsg" name="PositiveResponseMsg"/>
      <bpel:variable messageType="bs:GeneralExceptionSignal" name="GeneralExceptionSignal"/>
      <bpel:variable messageType="bs:ReceiptAcknowledgementSignal" name="ReceiptAcknowledgementSignal"/>
      <bpel:variable messageType="bs:ReceiptExceptionSignal" name="ReceiptExceptionSignal"/>
      <bpel:variable messageType="tm:TransactionProtocolSuccessMsg" name="TransactionProtocolSuccessMsg"/>
      <bpel:variable messageType="tm:TransactionProtocolFailureMsg" name="TransactionProtocolFailureMsg"/>
      <bpel:variable messageType="tm:TechnicalReceiptAcknowledgementMsg" name="TechnicalReceiptAcknowledgementMsg"/>
      <bpel:variable messageType="tm:TechnicalReceiptFailureMsg" name="TechnicalReceiptFailureMsg"/>
      <bpel:variable name="TimeToAckReceipt_Requesting" type="xsd:duration"/>
   </bpel:variables>
   <bpel:correlationSets>
      <bpel:correlationSet name="CorSet" properties="tns:messageID"/>
   </bpel:correlationSets>
   <bpel:sequence name="Seq_ResponderTM">
      <bpel:scope name="Scope_Initialisation">
         <bpel:faultHandlers>
            <bpel:catch faultName="bpel:invalidVariables">
               <bpel:assign name="SetRequestInvalid">
                  <bpel:copy>
                     <bpel:from>xsd:boolean("false")</bpel:from>
                     <bpel:to variable="RequestValid"/>
                  </bpel:copy>
               </bpel:assign>
            </bpel:catch>
            <bpel:catchAll>
               <bpel:assign name="SetRequestInvalid">
                  <bpel:copy>
                     <bpel:from>xsd:boolean("false")</bpel:from>
                     <bpel:to variable="RequestValid"/>
                  </bpel:copy>
               </bpel:assign>
            </bpel:catchAll>
         </bpel:faultHandlers>
         <bpel:sequence name="Seq_Initialisation">
            <bpel:receive createInstance="yes" name="ReceiveRequestingMsg" operation="@@Operation_Requesting_Public" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity" variable="RequestingMsg">
               <bpel:correlations>
                  <bpel:correlation initiate="yes" set="CorSet"/>
               </bpel:correlations>
            </bpel:receive>
            <bpel:validate name="ValidateRequestingMsg" variables="RequestingMsg"/>
            <bpel:assign name="RecordEventLog_ReceiveRequest">
               <bpel:copy>
                  <bpel:from>concat( current-dateTime() , string(": Received Request Document from Initiator"))</bpel:from>
                  <bpel:to variable="EventLog"/>
               </bpel:copy>
            </bpel:assign>
            <bpel:assign name="SetupProcess">
               <bpel:copy>
                  <bpel:from>'@@QOS_Requesting_TimeToAckReceipt'</bpel:from>
                  <bpel:to variable="TimeToAckReceipt_Requesting"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>'@@QOS_Responding_TimeToRespond'</bpel:from>
                  <bpel:to variable="TimeToRespond"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>current-dateTime()</bpel:from>
                  <bpel:to variable="TimestampRequestReceived"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>xsd:boolean('true')</bpel:from>
                  <bpel:to variable="RequestValid"/>
               </bpel:copy>
            </bpel:assign>
         </bpel:sequence>
      </bpel:scope>
      <bpel:scope name="Scope_TransactionRun">
         <bpel:faultHandlers>
            <bpel:catch faultName="RequestException_DeliveryFailureBA">
               <bpel:sequence name="Seq_RequestException_DeliveryFailureBA">
                  <bpel:assign name="ConstructDeliveryFailureError_DeliveryFailureBA">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg)</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("DeliveryFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingReceiptException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_REXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("ReceiptExceptionSignal")</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:if name="IsNotifyRequired_DeliveryFailureBA">
                     <bpel:condition>xsd:duration($TimeToAckReceipt_Requesting) ne xsd:duration("PT0H")</bpel:condition>
                     <bpel:invoke inputVariable="ReceiptExceptionSignal" name="SendReceiptException_DeliveryFailureBA" operation="ReceiptException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                        </bpel:correlations>
                     </bpel:invoke>
                  </bpel:if>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_DeliveryFailure_BA" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA"/>
                  <bpel:assign name="RecordEventLog_DeliveryFailure_BA">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Sent Transaction Protocol Failure signal to Business Application - Error sending requesting message to Business Application"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
            <bpel:catch faultName="RequestException_InvalidMsg">
               <bpel:sequence name="Seq_RequestException_InvalidMessage">
                  <bpel:assign name="ConstructRequestInvalidMessageError">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg)</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>
                           <bpel:literal>string("MessageInvalid")</bpel:literal>
                        </bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingReceiptException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_REXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("ReceiptExceptionSignal")</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="ReceiptException" variable="ReceiptExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_RequestInvalidMessage" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA"/>
                  <bpel:assign name="RecordEventLog_RequestInvalidMessage">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Sent Transaction Protocol Failure message to Business Application. Requesting message received from InitiatorTM is invalid."))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:if name="IsNotifyRequired_RequestInvalidMessage">
                     <bpel:condition>xsd:duration($TimeToAckReceipt_Requesting) ne xsd:duration("PT0H")</bpel:condition>
                     <bpel:invoke inputVariable="ReceiptExceptionSignal" name="SendReceiptException_RequestInvalidMessage" operation="ReceiptException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                        </bpel:correlations>
                     </bpel:invoke>
                  </bpel:if>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
            <bpel:catch faultName="TimeOutException_Response">
               <bpel:sequence name="Seq_TimeOutException_Response">
                  <bpel:assign name="ConstructTimeOutError_Response">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg)</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TimeOut")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_TimeOut_Response" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA"/>
                  <bpel:assign name="ConstructMessageGeneralError">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("GeneralExceptionSignal")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="GeneralExceptionSignal" name="SendGeneralException" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:assign name="RecordEventLog_TimeOut_Response">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Sent Transaction Protocol Failure message to Business Application - TimeOut Exception when waiting for a response"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
            <bpel:catch faultName="TimeOutException_ResponseReceiptAck">
               <bpel:sequence name="Seq_TimeOutException_ResponseReceiptAck">
                  <bpel:assign name="ConstructTimeOutError_ResponseReceiptAck">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg)</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TimeOut")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_TimeOut_ResponseReceiptAck" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA"/>
                  <bpel:assign name="ConstructMessageGeneralError">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("GeneralExceptionSignal")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="GeneralExceptionSignal" name="SendGeneralException" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:assign name="RecordEventLog_TimeOut_ResponseReceiptAck">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Time Out exception is thrown while waiting for a Receipt Acknowledgement signal from Initiator"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
            <bpel:catch faultName="ResponseException_InvalidMsg">
               <bpel:sequence name="ResponseException_InvalidMsg">
                  <bpel:assign name="ConstructTimeOutError_ResponseInvalidMsg">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("MessageInvalid")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("GeneralExceptionSignal")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_ResponseInvalidMsg" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA"/>
                  <bpel:assign name="RecordEventLog_ResponseInvalidMsg">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Sent Transaction Protocol Failure message to Business Application - Response message is invalid"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="GeneralExceptionSignal" name="SendGeneralException" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
            <bpel:catch faultName="ResponseException">
               <bpel:sequence name="Seq_ResponseException_ReceiptEx">
                  <bpel:assign name="ConstructDeliveryFailureError_ResponseReceiptEx">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg)</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("Other")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_DeliveryFailure_ResponseReceiptEx" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA"/>
                  <bpel:assign name="ConstructMessageGeneralError">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("GeneralExceptionSignal")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="GeneralExceptionSignal" name="SendGeneralException" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:assign name="RecordEventLog_DeliveryFailure_ResponseReceiptEx">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Sent Transaction Protocol Failure message to Business Application - Received Receipt Exception signal from Initiator"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
            <bpel:catchAll>
               <bpel:sequence name="Seq_GeneralException">
                  <bpel:assign name="ConstructMessageGeneralError">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("Other")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("GeneralExceptionSignal")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:assign name="RecordEventLog_GeneralFailure">
                     <bpel:copy>
                        <bpel:from>concat(current-dateTime() , string(": General Exception: Unexpected exception occurred during process. "))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_GeneralFailure" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:invoke inputVariable="GeneralExceptionSignal" name="SendGeneralException" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catchAll>
         </bpel:faultHandlers>
         <bpel:eventHandlers>
            <bpel:onEvent messageType="bs:GeneralExceptionSignal" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity" variable="GeneralExceptionSignal">
               <bpel:correlations>
                  <bpel:correlation initiate="no" set="CorSet"/>
               </bpel:correlations>
               <bpel:scope name="Scope_GeneralException">
                  <bpel:sequence name="Seq_GeneralException">
                     <bpel:assign name="RecordEventLog_GeneralFailure">
                        <bpel:copy>
                           <bpel:from>concat(current-dateTime() , concat( string(": "), $GeneralExceptionSignal.GeneralException/bs:Reason ) )</bpel:from>
                           <bpel:to variable="EventLog"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:assign name="ConstructMessageGeneralError">
                        <bpel:copy>
                           <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>string("Other")</bpel:from>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                              <bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from variable="EventLog"/>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                              <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>current-dateTime()</bpel:from>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                              <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                              <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>string("TransactionProtocolFailure")</bpel:from>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                              <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>string("2.0d")</bpel:from>
                           <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                              <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                           </bpel:to>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_GeneralFailure" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                        </bpel:correlations>
                     </bpel:invoke>
                     <bpel:exit name="Terminate"/>
                  </bpel:sequence>
               </bpel:scope>
            </bpel:onEvent>
         </bpel:eventHandlers>
         <bpel:sequence name="Seq_Request">
            <bpel:if name="IsRequestValid">
               <bpel:condition>$RequestValid</bpel:condition>
               <bpel:scope name="Scope_SendRequest">
                  <bpel:faultHandlers>
                     <bpel:catchAll>
                        <bpel:sequence name="Scope_SendRequestFault">
                           <bpel:assign name="RecordEventLog_DeliveryFailure">
                              <bpel:copy>
                                 <bpel:from>concat( current-dateTime() , string(": Exception Response: Received Technical Failure message as reply to sending Requesting Message from Business Application"))</bpel:from>
                                 <bpel:to variable="EventLog"/>
                              </bpel:copy>
                           </bpel:assign>
                           <bpel:throw faultName="RequestException_DeliveryFailureBA" name="RequestException_DeliveryFailureBA"/>
                        </bpel:sequence>
                     </bpel:catchAll>
                  </bpel:faultHandlers>
                  <bpel:sequence name="Seq_SendRequest">
                     <bpel:invoke inputVariable="RequestingMsg" name="SendRequestingMsg" operation="@@Operation_Requesting_BA" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA">
                        <bpel:correlations>
                           <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                        </bpel:correlations>
                     </bpel:invoke>
                     <bpel:assign name="RecordEventLog_RequestingMsg">
                        <bpel:copy>
                           <bpel:from>concat( current-dateTime() , string(": Receive Positive Receipt Acknowledgement from Business Application"))</bpel:from>
                           <bpel:to variable="EventLog"/>
                        </bpel:copy>
                        <bpel:copy>
                           <bpel:from>xsd:boolean("true")</bpel:from>
                           <bpel:to variable="IsReceiptPositive"/>
                        </bpel:copy>
                     </bpel:assign>
                  </bpel:sequence>
               </bpel:scope>
               <bpel:else>
                  <bpel:sequence name="Seq_RequestInvalid">
                     <bpel:assign name="RecordEventLog_InvalidMsg">
                        <bpel:copy>
                           <bpel:from>concat( current-dateTime() , string(": Failed schema validation: Requesting message received from Initiator is invalid"))</bpel:from>
                           <bpel:to variable="EventLog"/>
                        </bpel:copy>
                     </bpel:assign>
                     <bpel:throw faultName="RequestException_InvalidMsg" name="RequestException_InvalidMsg"/>
                  </bpel:sequence>
               </bpel:else>
            </bpel:if>
            <bpel:if name="IsReceiptRequired">
               <bpel:condition>xsd:duration($TimeToAckReceipt_Requesting) ne xsd:duration("PT0H")</bpel:condition>
               <bpel:sequence name="Seq_SendReceiptAck">
                  <bpel:assign name="ConstructReceiptAckSignal">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingReceiptAcknowledgement' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal"/>
                     </bpel:copy>
                     <bpel:copy ignoreMissingFromData="yes">
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_RACK_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier)</bpel:from>
                        <bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("ReceiptAcknowledgementSignal")</bpel:from>
                        <bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="ReceiptAcknowledgementSignal" name="SendReceiptAck" operation="ReceiptAcknowledgement" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:assign name="RecordEventLog_ReceiptAck">
                     <bpel:copy>
                        <bpel:from>concat( current-dateTime() , string(": Sent Receipt Acknowledgement to Initiator"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
               </bpel:sequence>
            </bpel:if>
            <bpel:sequence name="Seq_ResponseManagement">
               <bpel:if name="IsResponseExpected">
                  <bpel:condition>xsd:duration($TimeToRespond) ne xsd:duration("PT0H")</bpel:condition>
                  <bpel:scope name="Scope_Response">
                     <bpel:faultHandlers>
                        <bpel:catch faultName="bpel:invalidVariables">
                           <bpel:sequence name="Seq_ResponseException_InvalidMessage">
                              <bpel:if name="IsResponsePositive">
                                 <bpel:condition>$IsReceiptPositive</bpel:condition>
                                 <bpel:sequence name="Seq_ReplyPositiveResponseFault">
                                    <bpel:assign name="RecordEventLog_InvalidMsg_PosRes">
                                       <bpel:copy>
                                          <bpel:from>concat( current-dateTime() , string(": Failed Schema Validation: Positive response message received from Business Application is invalid."))</bpel:from>
                                          <bpel:to variable="EventLog"/>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:assign name="ConstructTechExp_PosResp">
                                       <bpel:copy>
                                          <bpel:from>
                                             <bpel:literal>
                                                <tm:TechnicalReceiptFailure>
   <tm:CreateDateTime/>
   <tm:TechnicalReceiptFailure_Status>
      <tm:ReasonCode CodeListName="string" CodeListSchemeURI="string" CodeName="string"/>
      <tm:ReasonText LanguageIdentifier="string" LanguageLocaleIdentifier="string"/>
      <tm:Sequence Format="string"/>
   </tm:TechnicalReceiptFailure_Status>
</tm:TechnicalReceiptFailure>
                                             </bpel:literal>
                                          </bpel:from>
                                          <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg"/>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>current-dateTime()</bpel:from>
                                          <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
                                             <bpel:query>tm:CreateDateTime</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from variable="EventLog"/>
                                          <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
                                             <bpel:query>tm:TechnicalReceiptFailure_Status/tm:ReasonText</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                       <bpel:copy>
                                          <bpel:from>string("MessageInvalid")</bpel:from>
                                          <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
                                             <bpel:query>tm:TechnicalReceiptFailure_Status/tm:ReasonCode</bpel:query>
                                          </bpel:to>
                                       </bpel:copy>
                                    </bpel:assign>
                                    <bpel:reply faultName="tns:ExceptionResponse" name="ReplyPosResp_Fault" operation="@@Operation_PositiveResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_PrivateFacing" variable="TechnicalReceiptFailureMsg"/>
                                    <bpel:throw faultName="ResponseException_InvalidMsg" name="ResponseException_InvalidMsg"/>
                                 </bpel:sequence>
                                 <bpel:else>
                                    <bpel:sequence name="Seq_ReplyNegativeResponseFault">
                                       <bpel:assign name="RecordEventLog_InvalidMsg_NegRes">
                                          <bpel:copy>
                                             <bpel:from>concat( current-dateTime() , string(": Failed Schema Validation: Negative response message received from Business Application is invalid."))</bpel:from>
                                             <bpel:to variable="EventLog"/>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:assign name="ConstructTechExp_NegResp">
                                          <bpel:copy>
                                             <bpel:from>
                                                <bpel:literal>
                                                   <tm:TechnicalReceiptFailure>
   <tm:CreateDateTime/>
   <tm:TechnicalReceiptFailure_Status>
      <tm:ReasonCode CodeListName="string" CodeListSchemeURI="string" CodeName="string"/>
      <tm:ReasonText LanguageIdentifier="string" LanguageLocaleIdentifier="string"/>
      <tm:Sequence Format="string"/>
   </tm:TechnicalReceiptFailure_Status>
</tm:TechnicalReceiptFailure>
                                                </bpel:literal>
                                             </bpel:from>
                                             <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg"/>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>current-dateTime()</bpel:from>
                                             <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
                                                <bpel:query>tm:CreateDateTime</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from variable="EventLog"/>
                                             <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
                                                <bpel:query>tm:TechnicalReceiptFailure_Status/tm:ReasonText</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                          <bpel:copy>
                                             <bpel:from>string("MessageInvalid")</bpel:from>
                                             <bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
                                                <bpel:query>tm:TechnicalReceiptFailure_Status/tm:ReasonCode</bpel:query>
                                             </bpel:to>
                                          </bpel:copy>
                                       </bpel:assign>
                                       <bpel:reply faultName="tns:ExceptionResponse" name="ReplyNegResp_Fault" operation="@@Operation_NegativeResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_PrivateFacing" variable="TechnicalReceiptFailureMsg"/>
                                       <bpel:throw faultName="ResponseException_InvalidMsg" name="ResponseException_InvalidMsg"/>
                                    </bpel:sequence>
                                 </bpel:else>
                              </bpel:if>
                           </bpel:sequence>
                        </bpel:catch>
                     </bpel:faultHandlers>
                     <bpel:pick name="Pick_WaitForResponse">
                        <bpel:onMessage operation="@@Operation_PositiveResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_PrivateFacing" variable="PositiveResponseMsg">
                           <bpel:correlations>
                              <bpel:correlation initiate="no" set="CorSet"/>
                           </bpel:correlations>
                           <bpel:sequence name="Seq_ReceivePositiveResponse">
                              <bpel:assign name="RecordEventLog_PositiveResponse">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Received Positive Response from Business Application"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>xsd:boolean("true")</bpel:from>
                                    <bpel:to variable="IsReceiptPositive"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:validate name="ValidatePositiveResponse" variables="PositiveResponseMsg"/>
                              <bpel:assign name="ConstructTechAck_PositiveResponse">
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>
                                          <doc:TechnicalReceiptAcknowledgement xmlns:doc="@@Namespace_TransactionModule" xmlns:ns="@@Namespace_TransactionModule" xmlns:ns2="urn:xml-gov-au:draft:data:messagingAggregates:1.1" xmlns:ns3="@@Namespace_BusinessSignal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
											<doc:CreateDateTime/>
											<doc:TechnicalReceiptSuccess_Status>
												<doc:Success_Description/>
												<doc:Reference/>
											</doc:TechnicalReceiptSuccess_Status>
										  </doc:TechnicalReceiptAcknowledgement>
                                       </bpel:literal>
                                    </bpel:from>
                                    <bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>current-dateTime()</bpel:from>
                                    <bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg">
                                       <bpel:query>tm:CreateDateTime</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>string("Positive response message is successfully received")</bpel:from>
                                    <bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg">
                                       <bpel:query>tm:TechnicalReceiptSuccess_Status/tm:Success_Description</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply name="ReplyPositiveResponseMessage" operation="@@Operation_PositiveResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_PrivateFacing" variable="TechnicalReceiptAcknowledgementMsg"/>
                              <bpel:assign name="RecordEventLog_SendTechAckPosResp">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Replied TechAck on Positive Response to Business Application"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="PositiveResponseMsg" name="SendPositiveResponse" operation="@@Operation_PositiveResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                                 <bpel:correlations>
                                    <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                                 </bpel:correlations>
                              </bpel:invoke>
                              <bpel:assign name="RecordEventLog_SendPosResp">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Sent Positive Response Message to Initiator"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:sequence>
                        </bpel:onMessage>
                        <bpel:onMessage operation="@@Operation_NegativeResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_PrivateFacing" variable="NegativeResponseMsg">
                           <bpel:correlations>
                              <bpel:correlation initiate="no" set="CorSet"/>
                           </bpel:correlations>
                           <bpel:sequence name="Seq_ReceiveNegativeResponse">
                              <bpel:assign name="RecordEventLog_NegativeResponse">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Received Negative Response from Business Application"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>xsd:boolean("false")</bpel:from>
                                    <bpel:to variable="IsReceiptPositive"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:validate name="ValidateNegativeResponse" variables="NegativeResponseMsg"/>
                              <bpel:assign name="ConstructTechAck_NegativeResponse">
                                 <bpel:copy>
                                    <bpel:from>
                                       <bpel:literal>
                                          <doc:TechnicalReceiptAcknowledgement xmlns:doc="@@Namespace_TransactionModule" xmlns:ns="@@Namespace_TransactionModule" xmlns:ns2="urn:xml-gov-au:draft:data:messagingAggregates:1.1" xmlns:ns3="@@Namespace_BusinessSignal" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<doc:CreateDateTime/>
	<doc:TechnicalReceiptSuccess_Status>
		<doc:Success_Description/>
		<doc:Reference/>
	</doc:TechnicalReceiptSuccess_Status>
</doc:TechnicalReceiptAcknowledgement>
                                       </bpel:literal>
                                    </bpel:from>
                                    <bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg"/>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>current-dateTime()</bpel:from>
                                    <bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg">
                                       <bpel:query>tm:CreateDateTime</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                                 <bpel:copy>
                                    <bpel:from>string("Negative response message is successfully received")</bpel:from>
                                    <bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg">
                                       <bpel:query>tm:TechnicalReceiptSuccess_Status/tm:Success_Description</bpel:query>
                                    </bpel:to>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:reply name="ReplyNegativeResponseMessage" operation="@@Operation_NegativeResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_PrivateFacing" variable="TechnicalReceiptAcknowledgementMsg"/>
                              <bpel:assign name="RecordEventLog_SendTechAckNegResp">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Replied TechAck on Negative Response to Business Application"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:invoke inputVariable="NegativeResponseMsg" name="SendNegativeResponse" operation="@@Operation_NegativeResponse_RespondingPrivate" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                                 <bpel:correlations>
                                    <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                                 </bpel:correlations>
                              </bpel:invoke>
                              <bpel:assign name="RecordEventLog_SendNegResp">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Sent Negative Response Message to Initiator"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:sequence>
                        </bpel:onMessage>
                        <bpel:onAlarm>
                           <bpel:for>xsd:duration($TimeToRespond)</bpel:for>
                           <bpel:sequence name="Seq_ResponseTimeOut">
                              <bpel:assign name="RecordEventLog_TimeOut">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Time Out Exception: Time Out exception is thrown while waiting for a response message from Business Application"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:throw faultName="TimeOutException_Response" name="TimeOutException_Response"/>
                           </bpel:sequence>
                        </bpel:onAlarm>
                     </bpel:pick>
                  </bpel:scope>
               </bpel:if>
               <bpel:assign name="AssignProcessVariables">
                  <bpel:copy>
                     <bpel:from>string('@@QOS_Responding_TimeToAckReceipt')</bpel:from>
                     <bpel:to variable="TimeToAckReceipt_Responding"/>
                  </bpel:copy>
               </bpel:assign>
               <bpel:if name="IsReceiptAckExpected">
                  <bpel:condition>xsd:duration($TimeToAckReceipt_Responding) ne xsd:duration("PT0H")</bpel:condition>
                  <bpel:sequence name="Seq_ResponseReceiptAck">
                     <bpel:pick name="Pick_WaitForReceiptAck">
                        <bpel:onMessage operation="ReceiptAcknowledgement" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity" variable="ReceiptAcknowledgementSignal">
                           <bpel:correlations>
                              <bpel:correlation initiate="no" set="CorSet"/>
                           </bpel:correlations>
                           <bpel:sequence name="Seq_ReceiveReceiptAck">
                              <bpel:assign name="RecordEventLog_ReceiptAck">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Received Receipt Acknowledgement signal from Initiator"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                           </bpel:sequence>
                        </bpel:onMessage>
                        <bpel:onMessage operation="ReceiptException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity" variable="ReceiptExceptionSignal">
                           <bpel:correlations>
                              <bpel:correlation initiate="no" set="CorSet"/>
                           </bpel:correlations>
                           <bpel:sequence name="Seq_ReceiveReceiptExp">
                              <bpel:assign name="RecordEventLog_ReceiptAck">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Response Exception: Received Receipt Exception signal from Initiator"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:throw faultName="ResponseException_ReceiptEx" name="ResponseException_ReceiptEx"/>
                           </bpel:sequence>
                        </bpel:onMessage>
                        <bpel:onAlarm>
                           <bpel:for>xsd:duration($TimeToAckReceipt_Responding)</bpel:for>
                           <bpel:sequence name="Seq_TimeOutReceiptAck">
                              <bpel:assign name="RecordEventLog_TimeOut_ResRepAck">
                                 <bpel:copy>
                                    <bpel:from>concat( current-dateTime() , string(": Time Out Exception: Time out exception is thrown while waiting for a receipt from Initiator"))</bpel:from>
                                    <bpel:to variable="EventLog"/>
                                 </bpel:copy>
                              </bpel:assign>
                              <bpel:throw faultName="TimeOutException_ResponseReceiptAck" name="TimeOutException_ResponseReceiptAck"/>
                           </bpel:sequence>
                        </bpel:onAlarm>
                     </bpel:pick>
                  </bpel:sequence>
               </bpel:if>
            </bpel:sequence>
         </bpel:sequence>
      </bpel:scope>
      <bpel:scope name="Scope_FinalProcess">
         <bpel:faultHandlers>
            <bpel:catch faultName="tns:ExceptionResponse">
               <bpel:sequence name="Seq_ProtocolSuccessFault">
                  <bpel:assign name="RecordEventLog_GeneralFailure">
                     <bpel:copy>
                        <bpel:from>concat(current-dateTime() , string(": General Exception: Failed to send Protocol Success message to Business Application"))</bpel:from>
                        <bpel:to variable="EventLog"/>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:assign name="ConstructMessageGeneralError">
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("TransactionProtocolSuccess")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
                           <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>current-dateTime()</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>concat(string("RS_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from variable="EventLog"/>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:Reason</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("GeneralExceptionSignal")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                     <bpel:copy>
                        <bpel:from>string("2.0d")</bpel:from>
                        <bpel:to part="GeneralException" variable="GeneralExceptionSignal">
                           <bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                        </bpel:to>
                     </bpel:copy>
                  </bpel:assign>
                  <bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_GeneralFailure" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity">
                     <bpel:correlations>
                        <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
                     </bpel:correlations>
                  </bpel:invoke>
                  <bpel:exit name="Terminate"/>
               </bpel:sequence>
            </bpel:catch>
         </bpel:faultHandlers>
         <bpel:sequence name="Seq_ProtocolSuccess">
            <bpel:assign name="ConstructProtocolSuccess">
               <bpel:copy>
                  <bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolSuccess', $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
                  <bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg"/>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>string("Process completed")</bpel:from>
                  <bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
                     <bpel:query>tm:ProtocolSuccess_Status/tm:Success_Description</bpel:query>
                  </bpel:to>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>current-dateTime()</bpel:from>
                  <bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
                     <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
                  </bpel:to>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>concat( string("RS_TPS_"), $TransactionProtocolSuccessMsg.TransactionProtocolSuccess/tm:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier)</bpel:from>
                  <bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
                     <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
                  </bpel:to>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>string("TransactionProtocolSuccess")</bpel:from>
                  <bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
                     <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
                  </bpel:to>
               </bpel:copy>
               <bpel:copy>
                  <bpel:from>string("2.0d")</bpel:from>
                  <bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
                     <bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
                  </bpel:to>
               </bpel:copy>
            </bpel:assign>
            <bpel:invoke inputVariable="TransactionProtocolSuccessMsg" name="SendProtocolSuccess" operation="TransactionProtocolSuccess" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RespondingPrivateTMLink" portType="tns:@@PortType_RespondingBusinessActivity_BA">
               <bpel:correlations>
                  <bpel:correlation initiate="no" pattern="request" set="CorSet"/>
               </bpel:correlations>
            </bpel:invoke>
         </bpel:sequence>
      </bpel:scope>
      <bpel:assign name="ProcessEnded">
         <bpel:copy>
            <bpel:from>xsd:boolean("true")</bpel:from>
            <bpel:to variable="ProcessEnded"/>
         </bpel:copy>
      </bpel:assign>
   </bpel:sequence>
</bpel:process>
