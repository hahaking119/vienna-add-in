<#@ assembly name="VIENNAAddInUtils.dll" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="VIENNAAddInUtils"#>
<#@ import namespace="VIENNAAddInUtils.t4"#>
<# 
	var library = metaPackage.Name.FirstCharToLowerCase();
#>
<#@ include file="t4/CctsRepositoryNamespaces.tt" #>
using System;
using System.Collections.Generic;
using VIENNAAddIn.upcc3.ccts.util;
using VIENNAAddIn.upcc3.uml;

namespace VIENNAAddIn.upcc3.repo
{
    internal class Upcc<#= metaPackage.Name #> : I<#= metaPackage.Name #>
    {
        private readonly IUmlPackage umlPackage;

        public Upcc<#= metaPackage.Name #>(IUmlPackage umlPackage)
        {
            this.umlPackage = umlPackage;
        }

        #region I<#= metaPackage.Name #> Members

		/// <summary>
		/// The <#= metaPackage.Stereotype #>'s unique ID.
		/// </summary>
        public int Id
        {
            get { return umlPackage.Id; }
        }

		/// <summary>
		/// The <#= metaPackage.Stereotype #>'s name.
		/// </summary>
        public string Name
        {
            get { return umlPackage.Name; }
        }
<#
///==========================================================================================================================
/// Parent packages
///==========================================================================================================================

		foreach (var relation in MetaModel.GetParentPackageRelationsFor(metaPackage))
		{
#>

		/// <summary>
		/// The <#= relation.ParentPackageType.Stereotype #> containing this <#= metaPackage.Stereotype #>.
		/// </summary>
		public I<#= relation.ParentPackageType.Name #> <#= relation.ParentPackageRole #>
        {
            get { return new Upcc<#= relation.ParentPackageType.Name #>(umlPackage.Parent); }
        }
<#
		}

///==========================================================================================================================
/// Sub-packages
///==========================================================================================================================

		foreach (var relation in MetaModel.GetSubPackageRelationsFor(metaPackage))
		{
			var subPackage = relation.SubPackageType.Stereotype;
			var subPackageParamName = relation.SubPackageType.Name.FirstCharToLowerCase();
#>

		/// <summary>
		/// The <#= subPackage #>s contained in this <#= metaPackage.Stereotype #>.
		/// </summary>
		public IEnumerable<I<#= relation.SubPackageType.Name #>> Get<#= relation.SubPackageRole #>()
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Retrieves a <#= subPackage #> by name.
		/// <param name="name">A <#= subPackage #>'s name.</param>
		/// <returns>The <#= subPackage #> with the given <paramref name="name"/> or <c>null</c> if no such <#= subPackage #> is found.</returns>
		/// </summary>
        public I<#= relation.SubPackageType.Name #> Get<#= relation.SubPackageType.Name #>ByName(string name)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Creates a <#= subPackage #> based on the given <paramref name="specification"/>.
		/// <param name="specification">A specification for a <#= subPackage #>.</param>
		/// <returns>The newly created <#= subPackage #>.</returns>
		/// </summary>
		public I<#= relation.SubPackageType.Name #> Create<#= relation.SubPackageType.Name #>(<#= relation.SubPackageType.Name #>Spec specification)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Updates a <#= subPackage #> to match the given <paramref name="specification"/>.
		/// <param name="<#= subPackageParamName #>">A <#= subPackage #>.</param>
		/// <param name="specification">A new specification for the given <#= subPackage #>.</param>
		/// <returns>The updated <#= subPackage #>. Depending on the implementation, this might be the same updated instance or a new instance!</returns>
		/// </summary>
        public I<#= relation.SubPackageType.Name #> Update<#= relation.SubPackageType.Name #>(I<#= relation.SubPackageType.Name #> <#= subPackageParamName #>, <#= relation.SubPackageType.Name #>Spec specification);
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Removes a <#= subPackage #> from this <#= metaPackage.Stereotype #>.
		/// <param name="<#= subPackageParamName #>">A <#= subPackage #>.</param>
		/// </summary>
        public void Remove<#= relation.SubPackageType.Name #>(I<#= relation.SubPackageType.Name #> <#= subPackageParamName #>);
		{
			throw new NotImplementedException();
		}
<#
		}
		
///==========================================================================================================================
/// Classifiers
///==========================================================================================================================

		foreach (var relation in MetaModel.GetClassifierRelationsFor(metaPackage))
		{
			var element = relation.ClassifierType.Stereotype;
			var classifier = relation.ClassifierType.Name.FirstCharToLowerCase();
			if (classifier == "enum") classifier = "@enum"; // dirty hack to avoid naming conflict with 'enum'
			var umlClassifierType = relation.ClassifierType.GetType().Name.Substring(4);
#>

		/// <summary>
		/// The <#= element #>s contained in this <#= metaPackage.Stereotype #>.
		/// </summary>
		public IEnumerable<I<#= relation.ClassifierType.Name #>> <#= relation.ClassifierType.Name #>s
		{
            get
            {
                foreach (var uml<#= umlClassifierType #> in umlPackage.<#= umlClassifierType #>s)
                {
                    yield return new Upcc<#= relation.ClassifierType.Name #>(uml<#= umlClassifierType #>);
                }
            }
		}

		/// <summary>
		/// Retrieves a <#= element #> by name.
		/// <param name="name">A <#= element #>'s name.</param>
		/// <returns>The <#= element #> with the given <paramref name="name"/> or <c>null</c> if no such <#= element #> is found.</returns>
		/// </summary>
        public I<#= relation.ClassifierType.Name #> Get<#= relation.ClassifierType.Name #>ByName(string name)
		{
            foreach (I<#= relation.ClassifierType.Name #> <#= classifier #> in <#= relation.ClassifierType.Name #>s)
            {
                if (<#= classifier #>.Name == name)
                {
                    return <#= classifier #>;
                }
            }
            return null;
		}

		/// <summary>
		/// Creates a <#= element #> based on the given <paramref name="specification"/>.
		/// <param name="specification">A specification for a <#= element #>.</param>
		/// <returns>The newly created <#= element #>.</returns>
		/// </summary>
		public I<#= relation.ClassifierType.Name #> Create<#= relation.ClassifierType.Name #>(<#= relation.ClassifierType.Name #>Spec specification)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Updates a <#= element #> to match the given <paramref name="specification"/>.
		/// <param name="<#= classifier #>">A <#= element #>.</param>
		/// <param name="specification">A new specification for the given <#= element #>.</param>
		/// <returns>The updated <#= element #>. Depending on the implementation, this might be the same updated instance or a new instance!</returns>
		/// </summary>
        public I<#= relation.ClassifierType.Name #> Update<#= relation.ClassifierType.Name #>(I<#= relation.ClassifierType.Name #> <#= classifier #>, <#= relation.ClassifierType.Name #>Spec specification)
		{
			throw new NotImplementedException();
		}

		/// <summary>
		/// Removes a <#= element #> from this <#= metaPackage.Stereotype #>.
		/// <param name="<#= classifier #>">A <#= element #>.</param>
		/// </summary>
        public void Remove<#= relation.ClassifierType.Name #>(I<#= relation.ClassifierType.Name #> <#= classifier #>)
		{
			throw new NotImplementedException();
		}
<#
		}

///==========================================================================================================================
/// Tagged Values
///==========================================================================================================================

		foreach (var metaTaggedValue in metaPackage.TaggedValues)
		{
#>

        ///<summary>
        /// Tagged value '<#= metaTaggedValue.Name #>'.
        ///</summary>
        public <#= metaTaggedValue.Cardinality == MetaCardinality.Many ? "IEnumerable<string>" : "string" #> <#= metaTaggedValue.AsPropertyName() #>
        {
            get { return umlPackage.GetTaggedValue(TaggedValues.<#= metaTaggedValue.Name #>).<#= metaTaggedValue.Cardinality == MetaCardinality.Many ? "SplitValues" : "Value" #>; }
        }
<#
		}
#>

        #endregion
	}
}