<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2008 sp1 (http://www.altova.com) by Alvin Tan (Red Wahoo) -->
<bpel:process xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable" xmlns:bs="@@Namespace_BusinessSignal" xmlns:bt="@@Namespace_BusinessTransaction" xmlns:ns="urn:xml-gov-au:draft:data:messagingAggregates:1.1" xmlns:tm="@@Namespace_TransactionModule" xmlns:tns="@@Namespace_Transaction" xmlns:xsd="http://www.w3.org/2001/XMLSchema" expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" name="@@PortType_RequestingBusinessActivity" queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" suppressJoinFailure="yes" targetNamespace="http://@@PortType_RequestingBusinessActivity">
	<bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_TM_FileLocation" namespace="@@Namespace_Transaction"/>
	<bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_BS_FileLocation" namespace="@@Namespace_BusinessSignal"/>
	<bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_TMM_FIleLocation" namespace="@@Namespace_TransactionModule"/>
	<bpel:import importType="http://schemas.xmlsoap.org/wsdl/" location="@@WSDL_BT_FileLocation" namespace="@@Namespace_BusinessTransaction"/>
	<bpel:partnerLinks>
		<bpel:partnerLink myRole="@@PortType_RequestingBusinessActivity" name="@@PartnerLinkTypeName_PublicIRLink" partnerLinkType="tns:@@PartnerLinkType_Public" partnerRole="@@PortType_RespondingBusinessActivity"/>
		<bpel:partnerLink myRole="@@PortType_RequestingBusinessActivity_PrivateFacing" name="@@PartnerLinkTypeName_RequestingPrivateTMLink" partnerLinkType="tns:@@PartnerLinkType_RequestingPrivate" partnerRole="@@PortType_RequestingBusinessActivity_BA"/>
	</bpel:partnerLinks>
	<bpel:variables>
		<bpel:variable name="TimestampRequestSent" type="xsd:dateTime"/>
		<bpel:variable name="TimeToAckReceipt_Requesting" type="xsd:duration"/>
		<bpel:variable name="TimeToAckReceipt_Responding" type="xsd:duration"/>
		<bpel:variable name="TimeToRespond" type="xsd:duration"/>
		<bpel:variable name="ResponseValid" type="xsd:boolean"/>
		<bpel:variable name="ProcessEnded" type="xsd:boolean"/>
		<bpel:variable name="IsResponsePositive" type="xsd:boolean"/>
		<bpel:variable name="EventLog" type="xsd:string"/>
		<bpel:variable messageType="bt:RequestMsg" name="RequestingMsg"/>
		<bpel:variable messageType="bt:PositiveResponseMsg" name="PositiveResponseMsg"/>
		<bpel:variable messageType="bs:ReceiptExceptionSignal" name="ReceiptExceptionSignal"/>
		<bpel:variable messageType="bs:ReceiptAcknowledgementSignal" name="ReceiptAcknowledgementSignal"/>
		<bpel:variable messageType="tm:TransactionProtocolFailureMsg" name="TransactionProtocolFailureMsg"/>
		<bpel:variable messageType="tm:TechnicalReceiptAcknowledgementMsg" name="TechnicalReceiptAcknowledgementMsg"/>
		<bpel:variable messageType="tm:TechnicalReceiptFailureMsg" name="TechnicalReceiptFailureMsg"/>
		<bpel:variable messageType="bs:GeneralExceptionSignal" name="GeneralExceptionSignal"/>
		<bpel:variable messageType="tm:TransactionProtocolSuccessMsg" name="TransactionProtocolSuccessMsg"/>
	</bpel:variables>
	<bpel:correlationSets>
		<bpel:correlationSet name="CorSet" properties="tns:messageID"/>
	</bpel:correlationSets>
	<bpel:sequence name="Seq_InitiatorTM">
		<bpel:scope name="Scope_Initialisation">
			<bpel:faultHandlers>
				<bpel:catchAll>
					<bpel:sequence name="Seq_InitialisationFault">
						<bpel:assign name="RecordEventLog_DeliveryFailure">
							<bpel:copy>
								<bpel:from>concat(string(current-dateTime()) , string(": Failed schema validation : Requesting message received from Business Application is invalid."))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructTechExp_InvalidMsg">
							<bpel:copy>
								<bpel:from>
									<bpel:literal>
										<tm:TechnicalReceiptFailure>
											<tm:CreateDateTime Format="string"/>
											<tm:TechnicalReceiptFailure_Status>
												<tm:ReasonCode CodeListName="string" CodeListSchemeURI="string" CodeName="string"/>
												<tm:ReasonText LanguageIdentifier="string" LanguageLocaleIdentifier="string"/>
											</tm:TechnicalReceiptFailure_Status>
										</tm:TechnicalReceiptFailure>
									</bpel:literal>
								</bpel:from>
								<bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
									<bpel:query>tm:CreateDateTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
									<bpel:query>tm:TechnicalReceiptFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("MessageInvalid")</bpel:from>
								<bpel:to part="TechnicalReceiptFailure" variable="TechnicalReceiptFailureMsg">
									<bpel:query>tm:TechnicalReceiptFailure_Status/tm:ReasonCode</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:reply faultName="tns:ExceptionResponse" name="ReplyRequestingMsgWithFault" operation="@@Operation_Requesting_RequestingPrivate" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_PrivateFacing" variable="TechnicalReceiptFailureMsg"/>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catchAll>
			</bpel:faultHandlers>
			<bpel:sequence name="Seq_Initialisation">
				<bpel:receive createInstance="yes" name="ReceiveRequestingMsg" operation="@@Operation_Requesting_RequestingPrivate" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_PrivateFacing" variable="RequestingMsg">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="CorSet"/>
					</bpel:correlations>
				</bpel:receive>
				<bpel:validate name="ValidateRequestingMsg" variables="RequestingMsg"/>
				<bpel:assign name="ConstructReplyTechAck">
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<doc:TechnicalReceiptAcknowledgement xmlns:doc="@@Namespace_TransactionModule" xmlns:ns="@@Namespace_TransactionModule" xmlns:xp20="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<doc:CreateDateTime/>
									<doc:TechnicalReceiptSuccess_Status>
										<doc:Success_Description/>
									</doc:TechnicalReceiptSuccess_Status>
								</doc:TechnicalReceiptAcknowledgement>
							</bpel:literal>
						</bpel:from>
						<bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>current-dateTime()</bpel:from>
						<bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg">
							<bpel:query>tm:CreateDateTime</bpel:query>
						</bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>string("Requesting message is successfully received")</bpel:from>
						<bpel:to part="TechnicalReceiptAcknowledgement" variable="TechnicalReceiptAcknowledgementMsg">
							<bpel:query>tm:TechnicalReceiptSuccess_Status/tm:Success_Description</bpel:query>
						</bpel:to>
					</bpel:copy>
				</bpel:assign>
				<bpel:assign name="InitialiseProcessVariables">
					<bpel:copy>
						<bpel:from>string('@@QOS_Requesting_TimeToAckReceipt')</bpel:from>
						<bpel:to variable="TimeToAckReceipt_Requesting"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>string('@@QOS_Requesting_TimeToRespond')</bpel:from>
						<bpel:to variable="TimeToRespond"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>xsd:boolean('false')</bpel:from>
						<bpel:to variable="IsResponsePositive"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>xsd:boolean('false')</bpel:from>
						<bpel:to variable="ResponseValid"/>
					</bpel:copy>
				</bpel:assign>
				<bpel:reply name="ReplyRequestingMsg" operation="@@Operation_Requesting_RequestingPrivate" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_PrivateFacing" variable="TechnicalReceiptAcknowledgementMsg"/>
			</bpel:sequence>
		</bpel:scope>
		<bpel:scope name="Scope_TransactionRun">
			<bpel:faultHandlers>
				<bpel:catch faultName="TimeOutException_ReceiptAck">
					<bpel:sequence name="TimeOutException_ReceiptAck">
						<bpel:assign name="RecordEventLog_TimeOut">
							<bpel:copy>
								<bpel:from>concat(current-dateTime() , string(": Time Out Exception: Time out exception is thrown while waiting for a Receipt Acknowledgement signal from Responder"))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructMessageTimeOutError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TimeOut")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TransactionProtocolFailure")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_TimeOutException" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:assign name="ConstructMessageGeneralError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:Reason</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("GeneralExceptionSignal")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catch>
				<bpel:catch faultName="RequestException_ReceiptAck">
					<bpel:sequence name="Seq_RequestException_ReceiptAck">
						<bpel:assign name="RecordEventLog_RequestException">
							<bpel:copy>
								<bpel:from>concat(current-dateTime() , string(": Received Receipt Exception signal from Responder"))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructMessageRequestException">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("DeliveryFailure")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TransactionProtocolFailure")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_RequestException" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:assign name="ConstructMessageGeneralError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:Reason</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("GeneralExceptionSignal")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catch>
				<bpel:catch faultName="TimeOutException_Response">
					<bpel:sequence name="Seq_TimeOutException_Response">
						<bpel:assign name="RecordEventLog_TmeOut_Response">
							<bpel:copy>
								<bpel:from>concat(current-dateTime() , string(": Time out exception is thrown while waiting for a Receipt Acknowledgement signal from Responder"))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructMessageTimeOutError_Response">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TimeOut")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TransactionProtocolFailureMsg")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_TimeOutException_Response" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:assign name="ConstructMessageGeneralError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:Reason</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("GeneralExceptionSignal")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catch>
				<bpel:catch faultName="ResponseException_DeliveryFailureBA">
					<bpel:sequence name="Seq_ResponseException_DeliveryFailureBA">
						<bpel:assign name="RecordEventLog_ResponseException">
							<bpel:copy>
								<bpel:from>concat(current-dateTime() , string(": Response Exception: Delivery failure exception is thrown when attempted to send response message to Business Application"))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructMessageResponseException">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("DeliveryFailure")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TransactionProtocolFailure")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_ResponseException" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:assign name="ConstructMessageGeneralError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:Reason</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("GeneralExceptionSignal")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catch>
				<bpel:catchAll>
					<bpel:sequence name="Seq_UnexpectedException">
						<bpel:assign name="RecordEventLog_GeneralFailure">
							<bpel:copy>
								<bpel:from>concat(current-dateTime() , string(": General Exception: Failed to send Protocol Success message to Business Application"))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructMessageGeneralError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("Other")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TransactionProtocolSuccess")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:Reason</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("GeneralExceptionSignal")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_GeneralFailure" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catchAll>
			</bpel:faultHandlers>
			<bpel:eventHandlers>
				<bpel:onEvent messageType="bs:GeneralExceptionSignal" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity" variable="GeneralExceptionSignal">
					<bpel:correlations>
						<bpel:correlation initiate="no" set="CorSet"/>
					</bpel:correlations>
					<bpel:scope name="Scope_GeneralException">
						<bpel:sequence name="Seq_GeneralException">
							<bpel:assign name="ConstructProtocolFailure_GenException">
								<bpel:copy>
									<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
								</bpel:copy>
								<bpel:copy>
									<bpel:from part="GeneralException" variable="GeneralExceptionSignal">
										<bpel:query>bs:Reason</bpel:query>
									</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
										<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
									</bpel:to>
								</bpel:copy>
								<bpel:copy>
									<bpel:from>string("Other")</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
										<bpel:query>tm:ProtocolFailure_Status/tm:ReasonCode</bpel:query>
									</bpel:to>
								</bpel:copy>
								<bpel:copy>
									<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
										<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
									</bpel:to>
								</bpel:copy>
								<bpel:copy>
									<bpel:from>string("TransactionProtocolFailure")</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
										<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
									</bpel:to>
								</bpel:copy>
								<bpel:copy>
									<bpel:from>current-dateTime()</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
										<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
									</bpel:to>
								</bpel:copy>
								<bpel:copy>
									<bpel:from>string("2.1a")</bpel:from>
									<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
										<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
									</bpel:to>
								</bpel:copy>
							</bpel:assign>
							<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_GeneralFailure" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
								<bpel:correlations>
									<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
								</bpel:correlations>
							</bpel:invoke>
							<bpel:assign name="RecordEventLog_GeneralFailure">
								<bpel:copy>
									<bpel:from>concat(current-dateTime() , concat( string(": "), $GeneralExceptionSignal.GeneralException/bs:Reason) )</bpel:from>
									<bpel:to variable="EventLog"/>
								</bpel:copy>
							</bpel:assign>
							<bpel:exit name="Terminate"/>
						</bpel:sequence>
					</bpel:scope>
				</bpel:onEvent>
			</bpel:eventHandlers>
			<bpel:sequence name="Seq_TransactionRun">
				<bpel:sequence name="Seq_RequestManagement">
					<bpel:invoke inputVariable="RequestingMsg" name="SendRequestingMsg" operation="@@Operation_Requesting_Public" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
						<bpel:correlations>
							<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
						</bpel:correlations>
					</bpel:invoke>
					<bpel:assign name="RecordEventLog_SendRequestingMsg">
						<bpel:copy>
							<bpel:from>concat(current-dateTime(),  " : Requesting message is sent to Responder")</bpel:from>
							<bpel:to variable="EventLog"/>
						</bpel:copy>
					</bpel:assign>
					<bpel:assign name="RecordTimestampRequestSent">
						<bpel:copy>
							<bpel:from>current-dateTime()</bpel:from>
							<bpel:to variable="TimestampRequestSent"/>
						</bpel:copy>
					</bpel:assign>
				</bpel:sequence>
				<bpel:sequence name="Seq_ReceiptAcknowledgement">
					<bpel:if name="IsAckReceiptRequired">
						<bpel:condition>xsd:duration($TimeToAckReceipt_Requesting) ne xsd:duration("PT0H")</bpel:condition>
						<bpel:pick name="Pick_WaitForReceiptAck">
							<bpel:onMessage operation="ReceiptAcknowledgement" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity" variable="ReceiptAcknowledgementSignal">
								<bpel:correlations>
									<bpel:correlation initiate="no" set="CorSet"/>
								</bpel:correlations>
								<bpel:sequence name="Seq_ReceiveReceiptAck">
									<bpel:assign name="RecordEventLog_ReceiveReceiptAck">
										<bpel:copy>
											<bpel:from>concat(current-dateTime() , string(": Received Receipt Acknowledgement signal from Responder"))</bpel:from>
											<bpel:to variable="EventLog"/>
										</bpel:copy>
									</bpel:assign>
								</bpel:sequence>
							</bpel:onMessage>
							<bpel:onMessage operation="ReceiptException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity" variable="ReceiptExceptionSignal">
								<bpel:correlations>
									<bpel:correlation initiate="no" set="CorSet"/>
								</bpel:correlations>
								<bpel:sequence name="Seq_ReceiveReceiptExp">
									<bpel:assign name="RecordEventLog_ReceiveReceiptExp">
										<bpel:copy>
											<bpel:from>concat(current-dateTime() , string(": Received Receipt Exception signal from Responder"))</bpel:from>
											<bpel:to variable="EventLog"/>
										</bpel:copy>
									</bpel:assign>
									<bpel:throw faultName="RequestException_ReceiptAck" name="RequestException_ReceiptAck"/>
								</bpel:sequence>
							</bpel:onMessage>
							<bpel:onAlarm>
								<bpel:for>xsd:duration($TimeToAckReceipt_Requesting)</bpel:for>
								<bpel:sequence name="Seq_TimeOurReceiptAck">
									<bpel:assign name="RecordEventLog_TimeOutReceiptAck">
										<bpel:copy>
											<bpel:from>concat(current-dateTime() , string(": Time Out Exception: Time out exception is thrown while waiting for receipt acknowledgement from Responder"))</bpel:from>
											<bpel:to variable="EventLog"/>
										</bpel:copy>
									</bpel:assign>
									<bpel:throw faultName="TimeOutException_ReceiptAck" name="TimeOutException_ReceiptAck"/>
								</bpel:sequence>
							</bpel:onAlarm>
						</bpel:pick>
					</bpel:if>
				</bpel:sequence>
				<bpel:sequence name="Seq_ResponseManagement">
					<bpel:if name="IsResponseExpected">
						<bpel:condition>xsd:duration($TimeToRespond) ne xsd:duration("PT0H")</bpel:condition>
						<bpel:sequence name="Seq_WaitForResponse">
							<bpel:pick name="Pick_WaitForResponse">
								<bpel:onMessage operation="@@Operation_PositiveResponse_Public" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RequestingBusinessActivity" variable="PositiveResponseMsg">
									<bpel:correlations>
										<bpel:correlation initiate="no" set="CorSet"/>
									</bpel:correlations>
									<bpel:sequence name="Seq_ReceivePositiveResponse">
										<bpel:assign name="RecordEventLog_PositiveResponse">
											<bpel:copy>
												<bpel:from>concat(current-dateTime() , string(": Received Positive Response Document"))</bpel:from>
												<bpel:to variable="EventLog"/>
											</bpel:copy>
										</bpel:assign>
										<bpel:validate name="ValidatePositiveResponse" variables="PositiveResponseMsg"/>
										<bpel:assign name="AssignPositive">
											<bpel:copy>
												<bpel:from>xsd:boolean("true")</bpel:from>
												<bpel:to variable="ResponseValid"/>
											</bpel:copy>
											<bpel:copy>
												<bpel:from>xsd:boolean("true")</bpel:from>
												<bpel:to variable="IsResponsePositive"/>
											</bpel:copy>
										</bpel:assign>
									</bpel:sequence>
								</bpel:onMessage>
								<bpel:onAlarm>
									<bpel:for>xsd:duration($TimeToRespond)</bpel:for>
									<bpel:sequence name="Seq_TimeOutResponse">
										<bpel:assign name="RecordEventLog_TimeOutResponse">
											<bpel:copy>
												<bpel:from>concat(current-dateTime() , string(": Time Out Exception: Time out exception is thrown while waiting for a response from Responder"))</bpel:from>
												<bpel:to variable="EventLog"/>
											</bpel:copy>
										</bpel:assign>
										<bpel:throw faultName="TimeOutException_Response" name="TimeOutException_Response"/>
									</bpel:sequence>
								</bpel:onAlarm>
							</bpel:pick>
							<bpel:assign name="AssignProcessVariables">
								<bpel:copy>
									<bpel:from>string('@@QOS_Responding_TimeToAckReceipt')</bpel:from>
									<bpel:to variable="TimeToAckReceipt_Responding"/>
								</bpel:copy>
								<bpel:copy>
									<bpel:from>string('@@QOS_Requesting_TimeToRespond')</bpel:from>
									<bpel:to variable="TimeToRespond"/>
								</bpel:copy>
							</bpel:assign>
							<bpel:sequence name="Seq_ReceiptAckResponse">
								<bpel:if name="IsReceiptRequired">
									<bpel:condition>xsd:duration($TimeToAckReceipt_Responding) ne xsd:duration("PT0H")</bpel:condition>
									<bpel:sequence name="Seq_SendReceiptAckResponse">
										<bpel:assign name="RecordEventLog_SendReceiptAck">
											<bpel:copy>
												<bpel:from>concat(current-dateTime() , string(": Send Receipt Acknowledgement to Responder"))</bpel:from>
												<bpel:to variable="EventLog"/>
											</bpel:copy>
										</bpel:assign>
										<bpel:assign name="ConstructReceiptAckSignal">
											<bpel:copy>
												<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingReceiptAcknowledgement' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
												<bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal"/>
											</bpel:copy>
											<bpel:copy>
												<bpel:from>current-dateTime()</bpel:from>
												<bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
													<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
												</bpel:to>
											</bpel:copy>
											<bpel:copy>
												<bpel:from>concat(string("RS_RACK_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier)</bpel:from>
												<bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
													<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
												</bpel:to>
											</bpel:copy>
											<bpel:copy>
												<bpel:from>string("ReceiptAcknowledgementSignal")</bpel:from>
												<bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
													<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
												</bpel:to>
											</bpel:copy>
											<bpel:copy>
												<bpel:from>string("2.1a")</bpel:from>
												<bpel:to part="ReceiptAcknowledgement" variable="ReceiptAcknowledgementSignal">
													<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
												</bpel:to>
											</bpel:copy>
										</bpel:assign>
										<bpel:invoke inputVariable="ReceiptAcknowledgementSignal" name="SendReceiptAckSignal" operation="ReceiptAcknowledgement" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
											<bpel:correlations>
												<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
											</bpel:correlations>
										</bpel:invoke>
									</bpel:sequence>
								</bpel:if>
							</bpel:sequence>
							<bpel:scope name="Scope_ResponseTransaction">
								<bpel:faultHandlers>
									<bpel:catchAll>
										<bpel:throw faultName="ResponseException_DeliveryFailureBA" name="ResponseException_DeliveryFailureBA"/>
									</bpel:catchAll>
								</bpel:faultHandlers>
								<bpel:if name="CheckResponseType">
									<bpel:condition>$IsResponsePositive</bpel:condition>
									<bpel:sequence name="Seq_SendPositiveResponse">
										<bpel:assign name="RecordEventLog_SendPositiveResponse">
											<bpel:copy>
												<bpel:from>concat(current-dateTime() , string(": Send Positive Response Document from Business Application"))</bpel:from>
												<bpel:to variable="EventLog"/>
											</bpel:copy>
										</bpel:assign>
										<bpel:invoke inputVariable="PositiveResponseMsg" name="SendPositiveResponse" operation="@@Operation_PositiveResponse_BA" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
											<bpel:correlations>
												<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
											</bpel:correlations>
										</bpel:invoke>
										<bpel:assign name="RecordEventLog_ReceivePositiveResponseTechAck">
											<bpel:copy>
												<bpel:from>concat(current-dateTime() , string(": Received Positive Reply from Business Application"))</bpel:from>
												<bpel:to variable="EventLog"/>
											</bpel:copy>
										</bpel:assign>
									</bpel:sequence>
								</bpel:if>
							</bpel:scope>
						</bpel:sequence>
					</bpel:if>
				</bpel:sequence>
			</bpel:sequence>
		</bpel:scope>
		<bpel:scope name="Scope_FinalProcess">
			<bpel:faultHandlers>
				<bpel:catch faultName="tns:ExceptionResponse">
					<bpel:sequence name="Seq_ProtocolSuccessFault">
						<bpel:assign name="RecordEventLog_GeneralFailure">
							<bpel:copy>
								<bpel:from>concat(current-dateTime() , string(": General Exception: Failed to send Protocol Success message to Business Application"))</bpel:from>
								<bpel:to variable="EventLog"/>
							</bpel:copy>
						</bpel:assign>
						<bpel:assign name="ConstructMessageGeneralError">
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolFailure' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:ProtocolFailure_Status/tm:ReasonText</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_TPF_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("TransactionProtocolFailure")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="TransactionProtocolFailure" variable="TransactionProtocolFailureMsg">
									<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingGeneralException' , $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal"/>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>current-dateTime()</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>concat(string("RQ_GEXP_"), $RequestingMsg.@@MessagePartName_RequestingMsg/bt:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier )</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from variable="EventLog"/>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:Reason</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("GeneralExceptionSignal")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
								</bpel:to>
							</bpel:copy>
							<bpel:copy>
								<bpel:from>string("2.1a")</bpel:from>
								<bpel:to part="GeneralException" variable="GeneralExceptionSignal">
									<bpel:query>bs:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
								</bpel:to>
							</bpel:copy>
						</bpel:assign>
						<bpel:invoke inputVariable="TransactionProtocolFailureMsg" name="ProtocolFailure_GeneralFailure" operation="TransactionProtocolFailure" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:invoke inputVariable="GeneralExceptionSignal" name="SendReceiptException_GeneralFailure" operation="GeneralException" partnerLink="@@PartnerLinkTypeName_PublicIRLink" portType="bt:@@PortType_RespondingBusinessActivity">
							<bpel:correlations>
								<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
							</bpel:correlations>
						</bpel:invoke>
						<bpel:exit name="Terminate"/>
					</bpel:sequence>
				</bpel:catch>
			</bpel:faultHandlers>
			<bpel:sequence name="Seq_ProtocolSuccess">
				<bpel:assign name="ConstructProtocolSuccess">
					<bpel:copy>
						<bpel:from>bpel:doXslTransform('@@XslFilePath_MappingProtocolSuccess', $RequestingMsg.@@MessagePartName_RequestingMsg )</bpel:from>
						<bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>string("Process completed")</bpel:from>
						<bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
							<bpel:query>tm:ProtocolSuccess_Status/tm:Success_Description</bpel:query>
						</bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>current-dateTime()</bpel:from>
						<bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
							<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:CreationDateAndTime</bpel:query>
						</bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>concat( string("RQ_TPS_"), $TransactionProtocolSuccessMsg.TransactionProtocolSuccess/tm:StandardBusinessMessageHeader/ns:BusinessScope/ns:InstanceIdentifier)</bpel:from>
						<bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
							<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Identifier</bpel:query>
						</bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>string("TransactionProtocolSuccess")</bpel:from>
						<bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
							<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Name</bpel:query>
						</bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from>string("2.1a")</bpel:from>
						<bpel:to part="TransactionProtocolSuccess" variable="TransactionProtocolSuccessMsg">
							<bpel:query>tm:StandardBusinessMessageHeader/ns:DocumentIdentification/ns:Version</bpel:query>
						</bpel:to>
					</bpel:copy>
				</bpel:assign>
				<bpel:invoke inputVariable="TransactionProtocolSuccessMsg" name="SendProtocolSuccess" operation="TransactionProtocolSuccess" outputVariable="TechnicalReceiptAcknowledgementMsg" partnerLink="@@PartnerLinkTypeName_RequestingPrivateTMLink" portType="tns:@@PortType_RequestingBusinessActivity_BA">
					<bpel:correlations>
						<bpel:correlation initiate="no" pattern="request" set="CorSet"/>
					</bpel:correlations>
				</bpel:invoke>
			</bpel:sequence>
		</bpel:scope>
		<bpel:assign name="ProcessEnded">
			<bpel:copy>
				<bpel:from>xsd:boolean("true")</bpel:from>
				<bpel:to variable="ProcessEnded"/>
			</bpel:copy>
		</bpel:assign>
	</bpel:sequence>
</bpel:process>
