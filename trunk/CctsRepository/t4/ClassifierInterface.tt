<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ include file="../t4/helpers.tt" #>
<# 
	var library = MetaModel.GetPackageRelationsFor(metaClassifier).First().PackageType;
#>
// *******************************************************************************
// This file is part of the VIENNAAddIn project
// 
// Licensed under GNU General Public License V3 http://gplv3.fsf.org/
// 
// For further information on the VIENNAAddIn project please visit 
// http://vienna-add-in.googlecode.com
// *******************************************************************************
using System.Collections.Generic;
<#@ include file="../t4/CctsRepositoryNamespaces.tt" #>

namespace CctsRepository.<#= library.Name #>
{
    public interface I<#= metaClassifier.Name #>
    {
		int Id { get; }
		
		string Name { get; }
		
        I<#= library.Name #> <#= library.Name #> { get; }
<# 
		foreach (var dependency in MetaModel.GetDependenciesFor(metaClassifier))
		{
#>

		I<#= dependency.TargetClassifierType.Name #> <#= FirstCharToUpperCase(dependency.Stereotype.ToString()) #> { get; }
<#
		}

		foreach (var attribute in MetaModel.GetAttributesFor(metaClassifier))
		{
#>

		<#= AttributePropertyType(attribute) #> <#= attribute.AttributeName #> { get; }
<#
		}
		
		foreach (var association in MetaModel.GetAssociationsForAssociatingClassifier(metaClassifier))
		{
#>

		<#= AssociationPropertyType(association) #> <#= association.Name #> { get; }
<#
		}

		foreach (var enumerationLiteral in MetaModel.GetEnumerationLiteralsFor(metaClassifier))
		{
#>

		<#= EnumerationLiteralPropertyType(enumerationLiteral) #> <#= enumerationLiteral.Name #> { get; }
<#
		}
		
		if (metaClassifier.HasTaggedValues)
		{
#>

		#region Tagged Values
<# 
			foreach (var taggedValue in metaClassifier.TaggedValues)
			{
#>

        ///<summary>
        /// Tagged value '<#= taggedValue.Name #>'.
        ///</summary>
		<#= TaggedValuePropertyType(taggedValue) #> <#= TaggedValuePropertyName(taggedValue) #> { get; }
<#
			}
#>

		#endregion
<#
		}
#>
    }
}
